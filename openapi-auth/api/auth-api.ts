/* tslint:disable */
/* eslint-disable */
/**
 * Skribe Authentication Endpoints
 * Endpoints used during the authentication, session verification or user creation processes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessToken } from '../models';
// @ts-ignore
import { CreateUser } from '../models';
// @ts-ignore
import { GetParticipant } from '../models';
// @ts-ignore
import { LoginSchema } from '../models';
// @ts-ignore
import { ParticipantResponse } from '../models';
// @ts-ignore
import { TenantSummary } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is called whenever we need to validate a user\'s session.  For example, when a user returns to the website, we first check if the user is authenticated with the client-side Firebase auth library.  Then that token should be passed to this endpoint to validate the session, which will result in one of the following:  **Session is Valid**  An empty 200 response simply means all is well.  **Token doesn\'t contain custom claims or the session is near expiration**  A new session cookie is set and a new token is minuted and returned.  The new token needs to be passed to `signInWithCustomToken()`.  **Session is Invalid / User was Deleted**  The session cookie is cleared and the user\'s token is revoked, if found.  ## Errors  **TENANT_NOT_FOUND**  The tenant specified in the token\'s custom claims doesn\'t exist, so destroy the user\'s session.  **TENANT_NOT_ACTIVE**  The tenant specified in the token\'s custom claims is suspended/inactive. Forward the user to an informational page.  **USER_DISABLED**  The user\'s account across all tenants, so destroy the user\'s session.  **TENANT_USER_NOT_FOUND**  The user is not associated with the tenant specified in the token\'s custom claims, so destroy the user\'s session.  **UNKNOWN**  Any other error. 
         * @summary Checks the status of a user\'s session and mints a new token if necessary.
         * @param {string} token Access token returned from the Firebase auth library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authStatus: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('authStatus', 'token', token)
            const localVarPath = `/auth/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * During the login process when a user enters their email address, that email should be passed to this endpoint to determine:  * The tenant(s) that this user can authenticate against.  * The provider(s) that each tenant uses.  With this information the login process can continue allowing the user to authenticate against the correct tenant\'s Identity Provider. 
         * @summary Returns a list of tenants and providers associated with a given email address.
         * @param {string} email Email address of the user wanting to log in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTenant: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('authTenant', 'email', email)
            const localVarPath = `/auth/tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a new user wishes to create an account, a POST request to this endpoint will handle all of the necessary backend requirements to create the user account.  The `provider` property determines what fields should appear in the request body.  If the `provider` is `email`, then the `email` and `password` properties are required.  For all other providers it\'s only necessary to provide the `token` returned from the identity provider.
         * @summary Creates a new tenantless user that does not have access to any areas of the app.
         * @param {CreateUser} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUser?: CreateUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/onboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get parcipnats details
         * @param {GetParticipant} [getParticipant] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parcipantInfo: async (getParticipant?: GetParticipant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getParticipant, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint should be called after a user has authenticated on the client-side using the Firebase auth library.  Use the ID token returned from the client-side authentication process and pass it to this endpoint to receive a new token with custom claims. 
         * @summary Called after the user has authenticated client-side with the Firebase auth library.
         * @param {LoginSchema} [loginSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (loginSchema?: LoginSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a user clicks the \"Logout\" button on the website, call this endpoint _before_ calling `signOut()` on the client-side.
         * @summary Clears the session cookie and destroys the session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is called whenever we need to validate a user\'s session.
         * For example, when a user returns to the website, we first check if the user is authenticated
         * with the client-side Firebase auth library.  Then that token should be passed to this endpoint
         * to validate the session, which will result in one of the following:  **Session is Valid**
         * An empty 200 response simply means all is well.  **Token doesn\'t contain custom claims or
         * the session is near expiration**  A new session cookie is set and a new token is minuted and returned.
         * The new token needs to be passed to `signInWithCustomToken()`.  **Session is Invalid / User was Deleted**
         * The session cookie is cleared and the user\'s token is revoked, if found.  ## Errors  **TENANT_NOT_FOUND**
         * The tenant specified in the token\'s custom claims doesn\'t exist, so destroy the user\'s session.
         * **TENANT_NOT_ACTIVE**  The tenant specified in the token\'s custom claims is suspended/inactive.
         * Forward the user to an informational page.  **USER_DISABLED**  The user\'s account across all tenants,
         * so destroy the user\'s session.  **TENANT_USER_NOT_FOUND**  The user is not associated with the tenant
         * specified in the token\'s custom claims, so destroy the user\'s session.  **UNKNOWN**  Any other error.
         * @summary Checks the status of a user\'s session and mints a new token if necessary.
         * @param {string} token Access token returned from the Firebase auth library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authStatus(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authStatus(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * During the login process when a user enters their email address, that email should be passed to this endpoint to determine:  * The tenant(s) that this user can authenticate against.  * The provider(s) that each tenant uses.  With this information the login process can continue allowing the user to authenticate against the correct tenant\'s Identity Provider. 
         * @summary Returns a list of tenants and providers associated with a given email address.
         * @param {string} email Email address of the user wanting to log in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTenant(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTenant(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a new user wishes to create an account, a POST request to this endpoint will handle all of the necessary backend requirements to create the user account.  The `provider` property determines what fields should appear in the request body.  If the `provider` is `email`, then the `email` and `password` properties are required.  For all other providers it\'s only necessary to provide the `token` returned from the identity provider.
         * @summary Creates a new tenantless user that does not have access to any areas of the app.
         * @param {CreateUser} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUser?: CreateUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get parcipnats details
         * @param {GetParticipant} [getParticipant] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parcipantInfo(getParticipant?: GetParticipant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parcipantInfo(getParticipant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint should be called after a user has authenticated on the client-side using the Firebase auth library.  Use the ID token returned from the client-side authentication process and pass it to this endpoint to receive a new token with custom claims. 
         * @summary Called after the user has authenticated client-side with the Firebase auth library.
         * @param {LoginSchema} [loginSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(loginSchema?: LoginSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(loginSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a user clicks the \"Logout\" button on the website, call this endpoint _before_ calling `signOut()` on the client-side.
         * @summary Clears the session cookie and destroys the session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * This endpoint is called whenever we need to validate a user\'s session.  For example, when a user returns to the website, we first check if the user is authenticated with the client-side Firebase auth library.  Then that token should be passed to this endpoint to validate the session, which will result in one of the following:  **Session is Valid**  An empty 200 response simply means all is well.  **Token doesn\'t contain custom claims or the session is near expiration**  A new session cookie is set and a new token is minuted and returned.  The new token needs to be passed to `signInWithCustomToken()`.  **Session is Invalid / User was Deleted**  The session cookie is cleared and the user\'s token is revoked, if found.  ## Errors  **TENANT_NOT_FOUND**  The tenant specified in the token\'s custom claims doesn\'t exist, so destroy the user\'s session.  **TENANT_NOT_ACTIVE**  The tenant specified in the token\'s custom claims is suspended/inactive. Forward the user to an informational page.  **USER_DISABLED**  The user\'s account across all tenants, so destroy the user\'s session.  **TENANT_USER_NOT_FOUND**  The user is not associated with the tenant specified in the token\'s custom claims, so destroy the user\'s session.  **UNKNOWN**  Any other error. 
         * @summary Checks the status of a user\'s session and mints a new token if necessary.
         * @param {string} token Access token returned from the Firebase auth library.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authStatus(token: string, options?: any): AxiosPromise<void> {
            return localVarFp.authStatus(token, options).then((request) => request(axios, basePath));
        },
        /**
         * During the login process when a user enters their email address, that email should be passed to this endpoint to determine:  * The tenant(s) that this user can authenticate against.  * The provider(s) that each tenant uses.  With this information the login process can continue allowing the user to authenticate against the correct tenant\'s Identity Provider. 
         * @summary Returns a list of tenants and providers associated with a given email address.
         * @param {string} email Email address of the user wanting to log in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTenant(email: string, options?: any): AxiosPromise<TenantSummary> {
            return localVarFp.authTenant(email, options).then((request) => request(axios, basePath));
        },
        /**
         * When a new user wishes to create an account, a POST request to this endpoint will handle all of the necessary backend requirements to create the user account.  The `provider` property determines what fields should appear in the request body.  If the `provider` is `email`, then the `email` and `password` properties are required.  For all other providers it\'s only necessary to provide the `token` returned from the identity provider.
         * @summary Creates a new tenantless user that does not have access to any areas of the app.
         * @param {CreateUser} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUser?: CreateUser, options?: any): AxiosPromise<void> {
            return localVarFp.createUser(createUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get parcipnats details
         * @param {GetParticipant} [getParticipant] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parcipantInfo(getParticipant?: GetParticipant, options?: any): AxiosPromise<ParticipantResponse> {
            return localVarFp.parcipantInfo(getParticipant, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint should be called after a user has authenticated on the client-side using the Firebase auth library.  Use the ID token returned from the client-side authentication process and pass it to this endpoint to receive a new token with custom claims. 
         * @summary Called after the user has authenticated client-side with the Firebase auth library.
         * @param {LoginSchema} [loginSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(loginSchema?: LoginSchema, options?: any): AxiosPromise<AccessToken> {
            return localVarFp.userLogin(loginSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user clicks the \"Logout\" button on the website, call this endpoint _before_ calling `signOut()` on the client-side.
         * @summary Clears the session cookie and destroys the session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: any): AxiosPromise<void> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * This endpoint is called whenever we need to validate a user\'s session.  For example, when a user returns to the website, we first check if the user is authenticated with the client-side Firebase auth library.  Then that token should be passed to this endpoint to validate the session, which will result in one of the following:  **Session is Valid**  An empty 200 response simply means all is well.  **Token doesn\'t contain custom claims or the session is near expiration**  A new session cookie is set and a new token is minuted and returned.  The new token needs to be passed to `signInWithCustomToken()`.  **Session is Invalid / User was Deleted**  The session cookie is cleared and the user\'s token is revoked, if found.  ## Errors  **TENANT_NOT_FOUND**  The tenant specified in the token\'s custom claims doesn\'t exist, so destroy the user\'s session.  **TENANT_NOT_ACTIVE**  The tenant specified in the token\'s custom claims is suspended/inactive. Forward the user to an informational page.  **USER_DISABLED**  The user\'s account across all tenants, so destroy the user\'s session.  **TENANT_USER_NOT_FOUND**  The user is not associated with the tenant specified in the token\'s custom claims, so destroy the user\'s session.  **UNKNOWN**  Any other error. 
     * @summary Checks the status of a user\'s session and mints a new token if necessary.
     * @param {string} token Access token returned from the Firebase auth library.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authStatus(token: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authStatus(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * During the login process when a user enters their email address, that email should be passed to this endpoint to determine:  * The tenant(s) that this user can authenticate against.  * The provider(s) that each tenant uses.  With this information the login process can continue allowing the user to authenticate against the correct tenant\'s Identity Provider. 
     * @summary Returns a list of tenants and providers associated with a given email address.
     * @param {string} email Email address of the user wanting to log in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTenant(email: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authTenant(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a new user wishes to create an account, a POST request to this endpoint will handle all of the necessary backend requirements to create the user account.  The `provider` property determines what fields should appear in the request body.  If the `provider` is `email`, then the `email` and `password` properties are required.  For all other providers it\'s only necessary to provide the `token` returned from the identity provider.
     * @summary Creates a new tenantless user that does not have access to any areas of the app.
     * @param {CreateUser} [createUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createUser(createUser?: CreateUser, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).createUser(createUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get parcipnats details
     * @param {GetParticipant} [getParticipant] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public parcipantInfo(getParticipant?: GetParticipant, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).parcipantInfo(getParticipant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint should be called after a user has authenticated on the client-side using the Firebase auth library.  Use the ID token returned from the client-side authentication process and pass it to this endpoint to receive a new token with custom claims. 
     * @summary Called after the user has authenticated client-side with the Firebase auth library.
     * @param {LoginSchema} [loginSchema] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public userLogin(loginSchema?: LoginSchema, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).userLogin(loginSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a user clicks the \"Logout\" button on the website, call this endpoint _before_ calling `signOut()` on the client-side.
     * @summary Clears the session cookie and destroys the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public userLogout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }
}
