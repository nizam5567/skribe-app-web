/* tslint:disable */
/* eslint-disable */
/**
 * Skrib
 * Skrib
 *
 * The version of the OpenAPI document: 2.11.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateExhibitRequest } from '../models';
/**
 * ExhibitsApi - axios parameter creator
 * @export
 */
export const ExhibitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeVisibility: async (id: number, status: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('changeVisibility', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('changeVisibility', 'status', status)
            const localVarPath = `/main/exhibits/changeVisibility/{id}/{status}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExhibit: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteExhibit', 'id', id)
            const localVarPath = `/main/exhibits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateExhibitRequest} createExhibitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exhibitsControllerCreateExhibit: async (createExhibitRequest: CreateExhibitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExhibitRequest' is not null or undefined
            assertParamExists('exhibitsControllerCreateExhibit', 'createExhibitRequest', createExhibitRequest)
            const localVarPath = `/main/exhibits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExhibitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExhibitsApi - functional programming interface
 * @export
 */
export const ExhibitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExhibitsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeVisibility(id: number, status: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeVisibility(id, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExhibit(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExhibit(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateExhibitRequest} createExhibitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exhibitsControllerCreateExhibit(createExhibitRequest: CreateExhibitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exhibitsControllerCreateExhibit(createExhibitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExhibitsApi - factory interface
 * @export
 */
export const ExhibitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExhibitsApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeVisibility(id: number, status: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.changeVisibility(id, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExhibit(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteExhibit(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateExhibitRequest} createExhibitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exhibitsControllerCreateExhibit(createExhibitRequest: CreateExhibitRequest, options?: any): AxiosPromise<void> {
            return localVarFp.exhibitsControllerCreateExhibit(createExhibitRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExhibitsApi - object-oriented interface
 * @export
 * @class ExhibitsApi
 * @extends {BaseAPI}
 */
export class ExhibitsApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {number} id 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExhibitsApi
     */
    public changeVisibility(id: number, status: string, options?: AxiosRequestConfig) {
        return ExhibitsApiFp(this.configuration).changeVisibility(id, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExhibitsApi
     */
    public deleteExhibit(id: number, options?: AxiosRequestConfig) {
        return ExhibitsApiFp(this.configuration).deleteExhibit(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateExhibitRequest} createExhibitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExhibitsApi
     */
    public exhibitsControllerCreateExhibit(createExhibitRequest: CreateExhibitRequest, options?: AxiosRequestConfig) {
        return ExhibitsApiFp(this.configuration).exhibitsControllerCreateExhibit(createExhibitRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
