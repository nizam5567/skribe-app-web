/* tslint:disable */
/* eslint-disable */
/**
 * Skrib
 * Skrib
 *
 * The version of the OpenAPI document: 2.11.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePartyRequest } from '../models';
// @ts-ignore
import { PartiesResponse } from '../models';
// @ts-ignore
import { TenantsResponse } from '../models';
// @ts-ignore
import { UpdatePartyRequest } from '../models';
/**
 * PartiesApi - axios parameter creator
 * @export
 */
export const PartiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvitation: async (eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('acceptInvitation', 'eventId', eventId)
            const localVarPath = `/main/parties/acceptInvitation/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {CreatePartyRequest} createPartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParty: async (createPartyRequest: CreatePartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPartyRequest' is not null or undefined
            assertParamExists('createParty', 'createPartyRequest', createPartyRequest)
            const localVarPath = `/main/parties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPartyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteParty', 'id', id)
            const localVarPath = `/main/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} eventid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartiesByEvent: async (eventid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventid' is not null or undefined
            assertParamExists('getPartiesByEvent', 'eventid', eventid)
            const localVarPath = `/main/parties/{eventid}`
                .replace(`{${"eventid"}}`, encodeURIComponent(String(eventid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myConnectionParties: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/main/parties/myConnectionParties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {UpdatePartyRequest} updatePartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParty: async (id: number, updatePartyRequest: UpdatePartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateParty', 'id', id)
            // verify required parameter 'updatePartyRequest' is not null or undefined
            assertParamExists('updateParty', 'updatePartyRequest', updatePartyRequest)
            const localVarPath = `/main/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePartyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartiesApi - functional programming interface
 * @export
 */
export const PartiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptInvitation(eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptInvitation(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {CreatePartyRequest} createPartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createParty(createPartyRequest: CreatePartyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createParty(createPartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParty(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParty(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} eventid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartiesByEvent(eventid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartiesByEvent(eventid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myConnectionParties(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myConnectionParties(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {UpdatePartyRequest} updatePartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParty(id: number, updatePartyRequest: UpdatePartyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateParty(id, updatePartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartiesApi - factory interface
 * @export
 */
export const PartiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartiesApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvitation(eventId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.acceptInvitation(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {CreatePartyRequest} createPartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParty(createPartyRequest: CreatePartyRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createParty(createPartyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteParty(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} eventid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartiesByEvent(eventid: number, options?: any): AxiosPromise<PartiesResponse> {
            return localVarFp.getPartiesByEvent(eventid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myConnectionParties(options?: any): AxiosPromise<TenantsResponse> {
            return localVarFp.myConnectionParties(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} id 
         * @param {UpdatePartyRequest} updatePartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParty(id: number, updatePartyRequest: UpdatePartyRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateParty(id, updatePartyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartiesApi - object-oriented interface
 * @export
 * @class PartiesApi
 * @extends {BaseAPI}
 */
export class PartiesApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public acceptInvitation(eventId: number, options?: AxiosRequestConfig) {
        return PartiesApiFp(this.configuration).acceptInvitation(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {CreatePartyRequest} createPartyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public createParty(createPartyRequest: CreatePartyRequest, options?: AxiosRequestConfig) {
        return PartiesApiFp(this.configuration).createParty(createPartyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public deleteParty(id: number, options?: AxiosRequestConfig) {
        return PartiesApiFp(this.configuration).deleteParty(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} eventid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public getPartiesByEvent(eventid: number, options?: AxiosRequestConfig) {
        return PartiesApiFp(this.configuration).getPartiesByEvent(eventid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public myConnectionParties(options?: AxiosRequestConfig) {
        return PartiesApiFp(this.configuration).myConnectionParties(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {number} id 
     * @param {UpdatePartyRequest} updatePartyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public updateParty(id: number, updatePartyRequest: UpdatePartyRequest, options?: AxiosRequestConfig) {
        return PartiesApiFp(this.configuration).updateParty(id, updatePartyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
